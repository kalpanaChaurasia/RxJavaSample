Creator Observable
==================


Create      - Will create the observable without any parameter
            - Pass a list as a global variable
            - will call the respective method itself (onNext, onComplete or onError)

Defer -


From        - emit one by one given list
            Types:   FromArray, FromIterable, FromCallable, FromFuture, FromPublisher
            Eg: Observable.fromArray(new String[]{"A", "B", "C", "D", "E", "F"})

Interval    -  Emit the data after given interval time
            Eg: Observable.interval(1, TimeUnit.SECONDS) // (Interval, TimeUnit)

Just        - Pass anything will emit all
            - If pass Null it will return null
            Eg: Observable.just(new String[]{"A", "B", "C", "D", "E", "F"})

Range       - Will emit the data by specified range
            - starting number and length
            Eg: Observable.range(2, 5)

Repeat      - Will repeat the same thing by given number
            Observable.range(2, 5).repeat(2)

Timer       - Will emit after specified time
            - Call only one time
            Eg:  Observable.timer(1, TimeUnit.SECONDS)

Transforming observables
============================

Buffer      - Emit the item as a bundle instead of one at a time
            - Observable.just("A", "B", "C", "D", "E", "F").buffer(2)

Map         - is having function, Take input as a observable emit item and modified it and then emits modified item
            - Order of insertion is maintained during emission
            -   getOriginalObservable()
                              .map(new Function<Integer, Integer>() {
                                  @Override
                                  public Integer apply(final Integer integer)  {
                                      return (integer * 2);
                                  }
                              })

            - Operator can be used when need to fetch data from server and need to modify it before emitting item

FlatMap     - is having function, take input as observable emit item but instead of returning the modified item, it returns
              observable itself
            - They merge the items emitted by the multiple observables and return a single observables
            - Order of insertion is not maintained during emission
            - getOriginalObservable()
                              .flatMap(new Function<Integer, Observable<Integer>>() {
                                  @Override
                                  public Observable<Integer> apply(final Integer integer)  {
                                      return getModifiedObservable(integer);
                                  }
                              })

SwitchMap   - Same as flat map - difference is
            - Always use latest item

ConcatMap   - Same as flat map - difference is, order of insertion is maintained during emission
            - It will take too much of time
Group by    -
Scan        - transform one emit item into another item, same like Map but it will preserve the previous item
            - below example output will be 1, 3, 6, 10 so on
            -  Observable.range(1, 10)
                              .scan(new BiFunction<Integer, Integer, Integer>() {
                                  @Override
                                  public Integer apply(Integer integer, Integer integer2) {
                                      return (integer + integer2);
                                  }
                              })

Filtering observables
============================

Debounce    - Emit the item after given timespan has passed
            - Eg: Search using AutoCompleteTextview - If user enter character or query, then instead of hitting directly the
              service instantly, using debounce operator we can wait for 2 sec once user stops entering it will hit the service.
            - If user enters again before 2 sec finish, it will increase 2 sec more.

Distinct    - Emits only non-duplicate item. (suppresses duplicate item)
            - Work very well with primitive data type
            - For custom data type use hashCode() and equals()
            - Observable.just(10, 20, 20, 10, 30, 40, 70, 60, 70)
                              .distinct()

ElementAt   - Emit the item using position (only one item)
            - Observable.just(1, 2, 3, 4, 5, 6)
                              .elementAt(1)
            - Input: [1, 2, 3, 4, 5, 6]
              Output : elementAt index 1
              onNext: 2

Filter      - Emit the predicate item
            -  Observable.just(1, 2, 3, 4, 5, 6)
                              .filter(new Predicate<Integer>() {
                                  @Override
                                  public boolean test(Integer integer) throws Exception {
                                      return (integer % 2 == 0);
                                  }
                              })
            - filters only the even numbers and emits those integers - Output below
            - onNext: 2
              onNext: 4
              onNext: 6

IgnoreElement - Ignore all the item or observable.
              - Directly call onComplete(), or onError()
              -     Observable.range(1, 10)
                                .ignoreElements()

Sample      -

Skip        - Skip (suppresses) the first n item -
            - skip(4) - skip first 4 item and emit remaining items
            -  Observable.just("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
                              .skip(4)
            - Output :
            - onNext: E
              onNext: F
              onNext: G
              onNext: H
              onNext: I
              onNext: J

SkipLast    - Skip (suppresses) the last n items.
            - skip(4) - skip last 4 items
            - Observable.just("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
                              .skipLast(4)
            - onNext: A
              onNext: B
              onNext: C
              onNext: D
              onNext: E
              onNext: F

Take        - It works reverse of skip. It will emit the fist n item
            - take(4) - it will emit first 4 items
            -  Observable.just("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
                              .take(4)
            - onNext: A
              onNext: B
              onNext: C
              onNext: D

TakeLast    - It works reverse of skipLast. It will emit the last n item
            - takeLast(4) - it will emit last 4 items
            -  Observable.just("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
                              .takeLast(4)
            - onNext: G
              onNext: H
              onNext: I
              onNext: J

Combining observables
============================

CombineLatest

Join

Merge

Concat

Zip

SwitchOnNext


Utility operators
================

Delay —

Do —

Materialize/Dematerialize —

ObserveOn —

Serialize —

SubscribeOn —

TimeInterval —

Timeout —

Timestamp —

Using —

Conditional and Boolean Operators
==================================