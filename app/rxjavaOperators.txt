=> RxJava 2 Examples present in this sample project
=================================================

RxJava 2.0 Example using CompositeDisposable as CompositeSubscription and Subscription

RxJava 2 Example using Flowable

RxJava 2 Example using SingleObserver, CompletableObserver.

RxJava 2 Example using RxJava2 operators such as map, zip, take, reduce, flatMap, filter, buffer, skip, merge, concat, replay,
and much more:

RxJava 2 Android Samples using Function as Func1

RxJava 2 Android Samples using BiFunction as Func2


=> Quick Look on few changes done in RxJava2 over RxJava1
=========================================================
RxJava1 -> RxJava2

onCompleted -> onComplete - without the trailing d
Func1 -> Function
Func2 -> BiFunction
CompositeSubscription -> CompositeDisposable
limit operator has been removed -> Use take in RxJava2


=> Operators :
============
Map -> transform the items emitted by an Observable by applying a function to each item

Zip -> combine the emissions of multiple Observables together via a specified function and emit single items for each combination
based on the results of this function

Filter -> emit only those items from an Observable that pass a predicate test

FlatMap -> transform the items emitted by an Observable into Observables, then flatten the emissions from those into a single
Observable

Take -> emit only the first n items emitted by an Observable

Reduce -> apply a function to each item emitted by an Observable, sequentially, and emit the final value

Skip -> suppress the first n items emitted by an Observable

Buffer -> periodically gather items emitted by an Observable into bundles and emit these bundles rather than emitting the items
one at a time

Concat -> emit the emissions from two or more Observables without interleaving them

Replay -> ensure that all observers see the same sequence of emitted items, even if they subscribe after the Observable has begun
emitting items

Merge -> combine multiple Observables into one by merging their emissions

SwitchMap -> transform the items emitted by an Observable into Observables, and mirror those items emitted by the
most-recently transformed Observable